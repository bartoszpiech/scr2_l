proc na diablo, odpalilem program z petla nieskonczona i moge wejsc do folderu proc
SYNOPSIS
     /usr/bin/pflags  [-r] pid | core [/lwp] ...
     /usr/bin/pcred  [pid |  core]...
     /usr/bin/pcred  [-u user/uid] [-g group/gid] [-G grouplist]
      pid...
     /usr/bin/pcred  -l login pid...
     /usr/bin/pldd  [-F] [pid |  core]...
     /usr/bin/psig  [-n] pid ...
     /usr/bin/pstack  [-F] pid | core  [/lwp] ...
     /usr/bin/pfiles  [-Fn] pid...
     /usr/bin/pwdx  pid...
     /usr/bin/pstop  pid...
     /usr/bin/prun  pid...
     /usr/bin/pwait  [-v] pid...
     /usr/bin/ptime  command [arg]...
DESCRIPTION
    The proc tools are utilities that exercise features of /proc (see proc(4) ). Most of them take a list of process-ids ( pid ); those that do also accept /proc/ nnn as a process-id, so the shell expansion /proc/* can be used to specify all processes in the system.
    pflags pokazuje flagi uzyte w programie
    pcred pokazuje credentials
    pmap pokazuje przestrzen adresow
    pldd pokazuje linkowane biblioteki
    psig pokazuje sygnaly
    pstack 
        Print a hex+symbolic stack trace for each lwp in each process.
    pfiles pokazuje otwarte pliki
    pwdx pokazuje pwd
    pstop stopuje proces
    prun
        Set each process running (inverse of pstop ).
    pwait
        Wait for all of the specified processes to terminate.
    ptree
        Print the process trees containing the specified pid s or user s, with child processes indented from their respective parent processes. An argument of all digits is taken to be a process-id, otherwise it is assumed to be a user login name. Default is all processes.
    ptime
        Time the command , like time(1) , but using microstate accounting for reproducible precision. Unlike time(1) , children of the command are not timed.
